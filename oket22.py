
import asyncio
import os
import re
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_id = int(os.getenv('24682981'))
api_hash = os.getenv('6e1838e609c9d9248e5f84092c3b1837')
bot_token = os.getenv('8098121171:AAGcumK5w_5PAn6Pk-LNafIWSiSstaJdZeA')
string_session = os.getenv('1ApWapzMBuwnN8RQtz19WW_rXksDanzyYyRMuyNKl1hoSinAAbmVZ2UH6FelvGJEFeye5Eemml5yRRsBx_cOqZoIafKEukA-Bl5lv3HgiU-u6WnHssuWsViFWheuGAkigh2aEFL1DddUFeYgi4R7zGPnYGza_4Sec_lIGec5PT8dhN49ODK3uhSDleeNo3uvC_57oKzMvLE3Qf8Nx6PLL6h2_-_0uaQ2QMdNJBQ8DCRXQDRHl_YqnuF5AcNYDemOhhfZ-hhIEA7ZD5nhN1KfTihVtvx7ugl4rhKKQrmihk697zsj1U1r6UuioDrQR0SkY0rnZKrI0miszCQcAEok_A4jlu4noGYE=')

# ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∏
delay_between_messages = 15
delay_between_cycles = 15

# üìÑ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
sending_enabled = False
recipients_list = []
message_refs = []

# ‚úâÔ∏è –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID)
allowed_users = [7756306224, 7151451389]  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å StringSession
client = TelegramClient(StringSession(string_session), api_id, api_hash)
bot = TelegramClient(StringSession(string_session + "_bot"), api_id, api_hash).start(bot_token=bot_token)

async def send_to_group(name):
    global sending_enabled
    while True:
        if sending_enabled and recipients_list and message_refs:
            print(f"\nüîÅ –†–∞—Å—Å—ã–ª–∫–∞: {name}")
            for source_chat, msg_id in message_refs:
                for chat in recipients_list:
                    try:
                        await client.forward_messages(entity=chat, from_peer=source_chat, id=msg_id)
                        print(f"[‚úÖ] {name} ‚Üí {chat}")
                    except Exception as e:
                        print(f"[‚ùå] {name} –æ—à–∏–±–∫–∞ —É {chat}: {e}")
                    await asyncio.sleep(delay_between_messages)
            print(f"‚è∏ {name}: –û–∂–∏–¥–∞–Ω–∏–µ {delay_between_cycles} —Å–µ–∫...")
        await asyncio.sleep(delay_between_cycles)

@bot.on(events.NewMessage(pattern='/start'))
async def bot_start(event):
    global sending_enabled
    if event.sender_id in allowed_users:
        sending_enabled = True
        await event.respond("[‚úÖ] –†–∞—Å—Å—ã–ª–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")
    else:
        await event.respond("[‚õî] –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

@bot.on(events.NewMessage(pattern='/stop'))
async def bot_stop(event):
    global sending_enabled
    if event.sender_id in allowed_users:
        sending_enabled = False
        await event.respond("[‚èπ] –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        await event.respond("[‚õî] –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

@bot.on(events.NewMessage(pattern='/add (.+)'))
async def add_chat(event):
    global recipients_list
    if event.sender_id in allowed_users:
        chat_link = event.pattern_match.group(1).strip()
        recipients_list.append(chat_link)
        await event.respond(f"[‚ûï] –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {chat_link}")
    else:
        await event.respond("[‚õî] –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

@bot.on(events.NewMessage(pattern='/list'))
async def list_chats(event):
    if event.sender_id in allowed_users:
        if recipients_list:
            chats = "\n".join(recipients_list)
            await event.respond(f"[üìÑ] –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n{chats}")
        else:
            await event.respond("[‚ö†Ô∏è] –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
    else:
        await event.respond("[‚õî] –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

@bot.on(events.NewMessage(pattern=r'/msg (https://t.me/\S+/\d+)'))
async def add_message(event):
    global message_refs
    if event.sender_id in allowed_users:
        url = event.pattern_match.group(1)
        match = re.match(r'https://t.me/(.+)/(\d+)', url)
        if match:
            chat = match.group(1)
            msg_id = int(match.group(2))
            message_refs.append((chat, msg_id))
            await event.respond(f"[üîπ] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {url}")
        else:
            await event.respond("[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É")
    else:
        await event.respond("[‚õî] –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

@bot.on(events.NewMessage(pattern='/msglist'))
async def list_messages(event):
    if event.sender_id in allowed_users:
        if message_refs:
            text = "\n".join([f"https://t.me/{chat}/{msg_id}" for chat, msg_id in message_refs])
            await event.respond(f"[üìå] –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:\n{text}")
        else:
            await event.respond("[‚ö†Ô∏è] –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç")

@bot.on(events.NewMessage(pattern='/msgclear'))
async def clear_messages(event):
    global message_refs
    if event.sender_id in allowed_users:
        message_refs.clear()
        await event.respond("[üßπ] –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω")
    else:
        await event.respond("[‚õî] –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

async def main():
    await client.start()
    await bot.start()
    await send_to_group('–ì—Ä—É–ø–ø–æ–≤–∞—è_—Ä–∞—Å—Å—ã–ª–∫–∞')

if __name__ == '__main__':
    with client:
        client.loop.run_until_complete(main())
